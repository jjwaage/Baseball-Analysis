---
title: "Estimating Playoffs Based on the Previous Year's Data"
author: "Jonna Waage"
date: "2023-05-31"
---


**Can the next MLB season be estimated by the last year's run differential data?**


```{r setup, include=FALSE}
library(tidyverse)
library(dplyr)
library("readxl")
knitr::opts_chunk$set(echo = TRUE,
                      message = FALSE,
                      warning = FALSE)
library(ggplot2)
library(MASS)
library(scales)
```


#### Introduction

Simulates a 2023 season of all 162 games using the Bradley-Terry model.

Uses last year's run differentials (average runs scored minus average runs allowed) to try to estimate this year's top performers. 


#### Data

  `schedule1 <- read_excel("schedule.xlsx")`  - reads in a two column excel sheet with headers 'Home' and 'Away' and teams from each game listed below
        
  `battingstats <- read_excel("2022battingstats.xlsx")` - reads in a excel sheet with 2022 MLB batting statistics for all teams 
        
  `fieldingstats <- read_excel("fieldingstats2022.xlsx")` - reads in a excel sheet with 2022 MLB fielding statistics for all teams

2022 statistics are from [here](https://www.baseball-reference.com/leagues/majors/2022.shtml).


#### Calculations

The [Bradley-Terry model](https://en.wikipedia.org/wiki/Bradley%E2%80%93Terry_model) is a probability model to predict outcomes of object i beating object j based on each objects ability or talent. In this instance, it is used to compare teams but it was originally to be used with players.

Talent is calculated by z-scores of seasonal average run differential of each team and then divided by 10. It is then adjusted for home field advantage so 0.04, based on [this](https://sabr.org/journal/article/home-field-advantage/#:~:text=In%20every%20sport%20and%20at,percent%20of%20the%20games%20played.) article, is added to the probability of the home team winning.

The equation used in this project for probability is:

    prob.Home = exp(Talent.Home) / (exp(Talent.Home) + exp(Talent.Visitor)) + 0.04)

Then, that probability is plugged into another equation to calculate a winner from each game. 

    outcome = rbinom(nrow(.), 1, prob.Home), winner = ifelse(outcome, Home, Visitor))
    
This equation uses [rbinom](https://www.programmingr.com/examples/neat-tricks/sample-r-function/r-rbinom/) which simulates a series of Bernoulli trials and returns the results. This returns a 1 if the home team wins and a 0 if the visiting team wins. 



```{r, echo = FALSE}
one.simulation <- function() {
  require(dplyr)

  NL_East <- c("Atlanta Braves", "Miami Marlins", "New York Mets","Philadelphia Phillies","Washington Nationals")
  
  NL_Cent <- c("Chicago Cubs", "Cincinnati Reds","Milwaukee Brewers", "Pittsburgh Pirates", "St. Louis Cardinals")
  
  NL_West <- c("Arizona Diamondbacks", "Colorado Rockies", "Los Angeles Dodgers","San Diego Padres", "San Francisco Giants")
  
  AL_East <- c("Baltimore Orioles", "Boston Red Sox","New York Yankees", "Tampa Bay Rays","Toronto Blue Jays")
  
  AL_Cent <- c("Chicago White Sox", "Cleveland Guardians","Detroit Tigers", "Kansas City Royals","Minnesota Twins")
  
  AL_West <- c("Oakland Athletics", "Houston Astros","Texas Rangers", "Los Angeles Angels","Seattle Mariners")

  teams <- c(NL_East, NL_Cent, NL_West,
             AL_East, AL_Cent, AL_West)
  
  league <- c(rep("NL", 15), rep("AL", 15))
  
  division <- c(rep("NL_East", 5), rep("NL_Cent", 5),
                rep("NL_West", 5), rep("AL_East", 5),
                rep("AL_Cent", 5), rep("AL_West", 5))
  
  Team_info <- data.frame(Team = teams,
                          League = league,
                          Division = division)
  Teams <- sort(teams)
  
  schedule <- read_excel("schedule.xlsx")
  battingstats <- read_excel("2022battingstats.xlsx")
  fieldingstats <- read_excel("fieldingstats2022.xlsx")
  
  runs_per_game <- (battingstats$RG)
  runs_against <- (fieldingstats$RAG)
  
  stats <- (runs_per_game - runs_against)
  stats <- (stats-mean(stats))/sd(stats)
  
  # simulate talents
  talents <- (stats / 10)
  # what <- t(rbind(Teams, runs_per_game, runs_against, stats))
  TAL <- tibble(Team = Teams, Talent = talents)
  
  # merge talents and win probs with schedule data frame
  SCH <- schedule %>%
    inner_join(TAL, by = c("Home" = "Team")) %>%
    rename(Talent.Home = Talent) %>%
    inner_join(TAL, by = c("Visitor" = "Team")) %>%
    rename(Talent.Visitor = Talent)

  # play season of games
  SCH %>% 
    mutate(prob.Home = exp(Talent.Home) /
             (exp(Talent.Home) + exp(Talent.Visitor)) + 0.04) -> SCH
  
  SCH %>%
    mutate(outcome = rbinom(nrow(.), 1, prob.Home),
           winner = ifelse(outcome, 
                      Home, Visitor)) -> SCH
  
  # compute number of games won for all teams
  SCH %>% 
    group_by(winner) %>%
    summarize(Wins = n(), .groups = "drop") %>%
    inner_join(TAL, by = c("winner" = "Team")) -> 
    RESULTS
  
  # add team info
   RESULTS <- inner_join(RESULTS, Team_info,
                         by = c("winner" = "Team"))
   
   # determine division winners
    out <- RESULTS %>%
      mutate(Winner.Div = 0, 
             prob = exp(Talent),
             outcome = sample(nrow(.), prob = prob)) %>%
      arrange(Division, desc(Wins), outcome) %>%
      dplyr::select(-outcome)
    out[c(1, 6, 11, 16, 21, 26), "Winner.Div"] <- 1
  
  # determine wild card teams
    
    out2 <- out %>% 
      mutate(Wild.Card = 0,
      outcome = sample(nrow(.), prob = prob)) %>%
      slice(- c(1, 6, 11, 16, 21, 26)) %>% 
      arrange(League, desc(Wins), outcome) %>% 
      dplyr::select(-outcome)
    out2[c(1, 2, 3, 13, 14, 15), "Wild.Card"] <- 1
    
    # put all data together
    
    out$Wild.Card <- 0
    out_final <- rbind(out[c(1, 6, 11, 16, 21, 26), ],
                       out2) %>% 
      arrange(Division, desc(Wins)) %>% 
      dplyr::select(-prob) %>% 
      mutate(Team = winner) %>% 
      dplyr::select(Team, League, Division, 
                    Talent, Wins, 
             Winner.Div, Wild.Card)
    
    out_final
}

print_al <- function(out2){
  out2 %>%
     mutate(Losses = 162 - Wins) -> out2
  
  al <- cbind(out2[6:10, 1],out2[6:10, 5], out2[6:10, 8],
           out2[1:5, 1], out2[1:5, 5], out2[1:5, 8],
           out2[11:15, 1],  out2[11:15, 5],  out2[11:15, 8])

  colnames(al)<-c("AL East", "Wins", "Losses", "AL Cent", "Wins", "Losses",
                  "AL West", "Wins", "Losses")

   knitr::kable(al, align = "crlcrlcrl")
}

print_nl <- function(out2) {
    out2 %>%
     mutate(Losses = 161 - Wins) -> out2
  
    nl <- cbind(out2[21:25, 1], out2[21:25, 5], out2[21:25, 8],
              out2[16:20, 1], out2[16:20, 5], out2[16:20, 8],
              out2[26:30, 1], out2[26:30, 5], out2[26:30, 8])
    
    colnames(nl)<-c("NL East", "Wins", "Losses", "NL Cent", "Wins", "Losses",
                  "NL West", "Wins", "Losses")
    
    knitr::kable(nl, align = "crlcrlcrl")
    
}

```



<!-- Also I am adding several helper functions `increasefont()` and `centertitle()` that I will use in ggplot2. -->

<!-- ```{r} -->
<!-- increasefont <- function(Size = 18){ -->
<!--   theme(text = element_text(size = Size)) -->
<!-- } -->

<!-- centertitle <- function(Color = "blue"){ -->
<!--     theme(plot.title =  -->
<!--             element_text(colour = Color, size = 18,  -->
<!--         hjust = 0.5, vjust = 0.8, angle = 0)) -->
<!-- } -->
<!-- ``` -->


#### One simulation

One season simulation with Wins and Losses from each team using the Bradley Terry model to predict each game. 


```{r, echo=FALSE}
out <- one.simulation()
print_nl(out)
print_al(out)
```



#### 1000 Season Simulations


```{r, echo = FALSE}
all_out <- NULL  
for(j in 1:1000){
  out <- one.simulation()
  out$Simulation <- j
  all_out <- rbind(all_out, out)
}
```


Here is the percentage of seasons in 1000 simulations where each team made the playoffs. 


```{r, echo = FALSE}

all_out %>%
  mutate(Level = as.factor(2 * (Winner.Div == 1) + (Wild.Card == 1))) -> all_out

playoffs <- NULL

all_out <- all_out %>% 
  mutate(playoffs = Winner.Div + Wild.Card)

playoffsummary <- all_out %>% 
  group_by(Division, Team) %>%
  summarize(percentplayoffs = sum(playoffs) / 1000)

colnames(playoffsummary) <- c("Division", "Team", "Percent Playoffs Made")

playoffsummary <- playoffsummary[order(playoffsummary$`Division`, playoffsummary$`Percent Playoffs Made`, decreasing = TRUE), ]

playoffsummary$`Percent Playoffs Made` <- percent(playoffsummary$`Percent Playoffs Made`, accuracy=0.1)

al <- cbind(playoffsummary[21:25, 2],playoffsummary[21:25, 3],
           playoffsummary[26:30, 2], playoffsummary[26:30, 3],
           playoffsummary[16:20, 2], playoffsummary[16:20, 3])

colnames(al)<-c("AL East", "Playoff %", "AL Cent", "Playoff %",
                  "AL West", "Playoff %")

nl <- cbind(playoffsummary[6:10, 2], playoffsummary[6:10, 3], 
            playoffsummary[11:15, 2], playoffsummary[11:15, 3], 
            playoffsummary[1:5, 2], playoffsummary[1:5, 3])
    
colnames(nl)<-c("NL East", "Playoff %", "NL Cent", "Playoff %",
                  "NL West", "Playoff %")

knitr::kable(nl, align = "lclclc")
knitr::kable(al, align = "lclclc")

```


Here is the percentage of wins each team had after 1000 seasons


```{r, echo=FALSE}
winpercent <- NULL

all_out <- all_out %>% 
  mutate(winpercent = Wins)

winpercent <- all_out %>% 
  group_by(Division, Team) %>%
  summarize(winpercent = sum(Wins) / 162000)

colnames(winpercent) <- c("Division", "Team", "Percent Wins")

winpercent <- winpercent[order(winpercent$`Division`, winpercent$`Percent Wins`, decreasing = TRUE), ]

winpercent$`Percent Wins` <- percent(winpercent$`Percent Wins`, accuracy = 0.1)

al <- cbind(winpercent[21:25, 2],winpercent[21:25, 3],
           winpercent[26:30, 2], winpercent[26:30, 3],
           winpercent[16:20, 2], winpercent[16:20, 3])

colnames(al)<-c("AL East", "Win %", "AL Cent", "Win %",
                  "AL West", "Win %")

nl <- cbind(winpercent[6:10, 2], winpercent[6:10, 3], 
            winpercent[11:15, 2], winpercent[11:15, 3], 
            winpercent[1:5, 2], winpercent[1:5, 3])
    
colnames(nl)<-c("NL East", "Win %", "NL Cent", "Win %",
                  "NL West", "Win %")

knitr::kable(nl, align = "lclclc")
knitr::kable(al, align = "lclclc")

```



#### Comparing to the 2023 Season

Here are the current standings and win percentages of each team in the MLB as of June 12th at 4 pm PST


```{r, echo=FALSE}
aldivisions <- c("AL East", "AL Cent", "AL West")

  AL_East <- c("Tampa Bay Rays", "Baltimore Orioles", "New York Yankees", "Toronto Blue Jays", "Boston Red Sox")
  
  ALe_percent <- c("69.6%","63.1%", "56.7%","55.2%","49.3%") 
  
  AL_Cent <- c("Minnesota Twins", "Cleveland Guardians", "Chicago White Sox", "Detroit Tigers", "Kansas City Royals")
  
  ALc_percent <- c("50%", "47.7%", "43.3%",  "42.2%", "27.3%")
  
  AL_West <- c("Texas Rangers", "Houston Astros","Los Angeles Angels","Seattle Mariners", "Oakland Athletics")
  
  ALw_percent <- c("63.1%", "56.1%","54.4%","49.2%", "26.5%")

  al <- cbind(AL_East, ALe_percent, AL_Cent,  ALc_percent, AL_West,  ALw_percent)

  colnames(al)<-c("AL East", "Win %", "AL Cent", "Win %", "AL West", "Win %")

  
nldivisions <- c("NL East", "NL Cent", "NL West")

  NL_East <- c("Atlanta Braves", "Miami Marlins", "Philadelphia Phillies", "New York Mets","Washington Nationals")
  
  NLe_percent <- c("60.6%","55.2%","48.5%" ,"47%", "40.6%")

  NL_Cent <- c("Pittsburgh Pirates", "Milwaukee Brewers", "Cincinnati Reds", "Chicago Cubs", "St. Louis Cardinals")
  
  NLc_percent <- c("53.1%", "51.5%","47.8%","43.1%","40.3%")

  NL_West <- c("Arizona Diamondbacks", "Los Angeles Dodgers", "San Francisco Giants", "San Diego Padres", "Colorado Rockies")
  
  NLw_percent <- c("62.1%", "56.1%", "51.5%", "47.7%", "41.2%")

  nl <- cbind(NL_East, NLe_percent, NL_Cent, NLc_percent, NL_West, NLw_percent)

  colnames(nl)<-c("NL East", "Win %", "NL Cent" , "Win %", "NL West", "Win %")

knitr::kable(nl)
knitr::kable(al)

```



<!-- add percentage of wins of each team from simulation and also this year to have a better idea and rank them that way -->

As shown above, there are some similarities between the standings of last year and this year but there are also some teams that are doing way worse or better than projected. The Oakland Athletics and Kansas City Royals have a 20% difference between their winning percentage now and the average win percentage that was simulated. The Tampa Bay Rays also have a 20% difference but they are winning more than projected. 


<!-- Level is an ordinal response variable. Using a proportional odds model, model the ordinal response as a function of the team's talent. -->

<!-- For a range of talent values from -0.9 to 0.9, find the fitted model probability of the three outcomes. -->

<!-- ```{r} -->
<!-- pfit <- polr(Level ~ Talent, -->
<!--              data = all_out) -->
<!-- DF <- data.frame(Talent = seq(-0.9, 0.9, -->
<!--                                   length.out = 200)) -->
<!-- Prob <- predict(pfit, DF, type = "probs") -->
<!-- DF1 <- DF2 <- DF3 <- DF -->
<!-- DF1$Probability <- Prob[, 3]; DF1$Type <- "Division" -->
<!-- DF2$Probability <- Prob[, 2]; DF2$Type <- "Wild Card" -->
<!-- DF3$Probability <- Prob[, 3] + Prob[, 2] -->
<!-- DF3$Type <- "Playoff" -->
<!-- DFall <- rbind(DF1, DF2, DF3) -->
<!-- ``` -->

<!-- Graph of this division, wild card, and playoff probabilities. -->

<!-- ```{r} -->
<!-- ggplot(DFall, aes(Talent, Probability, -->
<!--                   color = Type)) + -->
<!--   geom_line() + -->
<!--   increasefont() + -->
<!--   ggtitle("Probability of Reaching Different Levels") + -->
<!--   centertitle() -->
<!-- ``` -->

<!-- #### Talents of wild card teams and division-winners -->

<!-- Construct density estimates of -->

<!-- -   all teams -->
<!-- -   teams that win division -->
<!-- -   teams that get wild card -->

<!-- ```{r} -->
<!-- data1 <- filter(all_out, Wild.Card == 1) %>%  -->
<!--          mutate(Type = "Wild Card") -->
<!-- data2 <- filter(all_out, Winner.Div == 1) %>%  -->
<!--   mutate(Type = "Win Division") -->
<!-- data3 <- all_out %>%  -->
<!--   mutate(Type = "All Teams") -->

<!-- ggplot(rbind(data1, data2, data3),  -->
<!--        aes(Talent, color = Type)) + -->
<!--   geom_density(size = 1.5) + -->
<!--   increasefont() + centertitle() + -->
<!--   ggtitle("Talent Distributions for Three Types of Teams") -->
<!-- ``` -->

<!-- #### How many games to win? -->

<!-- Find the conditional probability of winning division title, of getting wild card, and making the playoffs given you won X games. -->

<!-- ```{r} -->
<!-- all_out %>%  -->
<!--   filter(Wins >= 25, Wins <= 45) %>%  -->
<!--   group_by(Wins) %>%  -->
<!--   summarize(N = n(),  -->
<!--             Prob_Div = mean(Winner.Div), -->
<!--             Prob_WC = mean(Wild.Card), -->
<!--             .groups = "drop") -> S -->
<!-- ``` -->

<!-- Plot smooths of these empirical probabilities. -->

<!-- ```{r} -->
<!-- S %>%  -->
<!--   ggplot() + -->
<!--   geom_smooth(aes(Wins, Prob_Div), se = FALSE, -->
<!--               color = "red", -->
<!--               method = "loess") + -->
<!--   geom_smooth(aes(Wins, Prob_WC), se = FALSE, -->
<!--               color = "blue", -->
<!--               method = "loess") +  -->
<!--   geom_smooth(aes(Wins, Prob_Div + Prob_WC), -->
<!--                   se = FALSE, -->
<!--               color = "black", -->
<!--               method = "loess") + -->
<!--   increasefont() + -->
<!--   ylab("Probability") + -->
<!--   annotate(geom = "text", x = 32, y = 0.75, -->
<!--            label = "Playoffs", size = 7) + -->
<!--   annotate(geom = "text", x = 40.3, y = 0.75, -->
<!--            label = "Division", size = 7, -->
<!--            color = "red") + -->
<!--   annotate(geom = "text", x = 40.8, y = 0.25, -->
<!--            label = "Wild Card", size = 7, -->
<!--            color = "blue") + -->
<!--   ggtitle("How Many Games Does Team Need to Win?") + -->
<!--   centertitle() -->
<!-- ``` -->

<!-- \`\`\`\` -->

