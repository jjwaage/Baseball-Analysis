---
title: "Comparing My Playoff Projection to Playoff Percentages Each Week"
author: "Jonna Waage"
date: "2023-09-25"
---

## How does my Projection of Playoff Contending Teams Compare to their Percentages of Making the Playoffs Every Day?

This animation goes day by day of the 2023 MLB season and compares the team's ever-changing actual percentage of making the playoffs to the playoff percentage that I simulated in the other blog post.

```{r setup, include=FALSE}
##install.packages("gganimate")
library(gifski)
library(gganimate)
#library(animation)
library(quarto)
library(tidyverse)
library(dplyr)
library(readxl)
knitr::opts_chunk$set(echo = TRUE,
                      message = FALSE,
                      warning = FALSE)
library(ggplot2)
library(MASS)
library(scales)
library(reshape2)
library(data.table)
```


```{r, echo=FALSE}
load("playoffsummarydata.RData")

files <- list.files( pattern = "*.xlsx", full.names = TRUE)

all_data <- files %>%
  map_dfr(~ {
    temp_data <- read_excel(.x, skip = 1)
    temp_data <- temp_data[, c("Date", "Post")] %>%
      mutate(FileName = tools::file_path_sans_ext(basename(.x)))
    return(temp_data)
  })


convert_to_percentage <- function(value) {
  # Remove greater than and less than signs if present
  cleaned_value <- gsub("[><]", "", as.character(value))
  
  if (grepl("%", cleaned_value)) {
    return(cleaned_value)
  } else if (grepl("E", cleaned_value)) {
    return(sprintf("%.2f%%", as.numeric(cleaned_value) * 100))
  } else {
    return(sprintf("%.2f%%", as.numeric(cleaned_value) * 100))
  }
}

all_data$Post <- sapply(all_data$Post, convert_to_percentage)

names(all_data)[names(all_data) == "FileName"] <- "Team"

#write.csv(playoffsummary, file = "playoffsummary.csv")
playoffsummary<-read.csv("playoffsummary.csv")

merged_data <- merge(playoffsummary, all_data, by.x = "Team_short", by.y = "Team")

# Assuming 'merged_data' is your merged data frame
# Convert the "Date" column to a proper date format
merged_data$Date <- as.Date(merged_data$Date, format = "%Y-%m-%d")

# Make sure 'Team' is a factor
merged_data$Team <- factor(merged_data$Team, levels = unique(merged_data$Team))

merged_data$Post <- as.numeric(gsub("%", "", merged_data$Post))
merged_data$Percent.Playoffs.Made <- as.numeric(gsub("%", "", merged_data$Percent.Playoffs.Made))

team_acronyms <- c(
  "Arizona Diamondbacks" = "ARI",
  "Atlanta Braves" = "ATL",
  "Baltimore Orioles" = "BAL",
  "Boston Red Sox" = "BOS",
  "Chicago White Sox" = "CHW",
  "Chicago Cubs" = "CHC",
  "Cincinnati Reds" = "CIN",
  "Cleveland Guardians" = "CLE",
  "Colorado Rockies" = "COL",
  "Detroit Tigers" = "DET",
  "Houston Astros" = "HOU",
  "Kansas City Royals" = "KC",
  "Los Angeles Angels" = "LAA",
  "Los Angeles Dodgers" = "LAD",
  "Miami Marlins" = "MIA",
  "Milwaukee Brewers" = "MIL",
  "Minnesota Twins" = "MIN",
  "New York Yankees" = "NYY",
  "New York Mets" = "NYM",
  "Oakland Athletics" = "OAK",
  "Philadelphia Phillies" = "PHI",
  "Pittsburgh Pirates" = "PIT",
  "San Diego Padres" = "SD",
  "San Francisco Giants" = "SF",
  "Seattle Mariners" = "SEA",
  "St. Louis Cardinals" = "STL",
  "Tampa Bay Rays" = "TB",
  "Texas Rangers" = "TEX",
  "Toronto Blue Jays" = "TOR",
  "Washington Nationals" = "WSH"
)

# Apply the mapping to create a new column 'Team_acronym'
merged_data$Team_acronym <- team_acronyms[as.character(merged_data$Team)]


# Create the animated dot plot using gganimate
p <- ggplot(merged_data, aes(x = Percent.Playoffs.Made, y = Post, color = Team_acronym, label = as.character(Date))) +
  geom_point(size = 1) +  # Adjust the size of the points
  geom_text(hjust = 0, vjust = 1, size = 3, x = 7, y = 105, color = "black") +
    labs(
    title = "Comparison of MLB Playoff Percentages",
    x = "My Projected Playoff Percentage",  # Replace with your desired x-axis label
    y = "Daily Projected Playoff Percentage",  # Replace with your desired y-axis label
    color = "Team"  # Replace with your desired legend label
  ) +
  theme_minimal() +
  transition_time(Date) +  # Use transition_time for animation over time
  enter_fade() +
  exit_fade() +
  theme(axis.text = element_text(size = 6),  # Adjust text size on the axes
        plot.title = element_text(hjust = 0.5, margin = margin(b = 10)),  # Center the title
        axis.title.x = element_text(margin = margin(t = 10)),  # Add top margin to x-axis title
        axis.title.y = element_text(margin = margin(r = 10)),
        axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
        axis.text.y = element_text(size = 6),  # Adjust y-axis text size
        axis.ticks = element_blank(),  # Remove axis ticks
        plot.margin = margin(0, 10, 0, 0, "mm")
  ) +
  scale_x_continuous(breaks = seq(-10, 110, by = 10)) +
  scale_y_continuous(breaks = seq(0, 100, by = 10)) 

# Save the animation as a GIF directly to the desired location
final_animation_file <- "/Users/jonnawaage/Documents/GitHub/Baseball Analysis/docs/posts/Playoff Analysis/mlb_playoff_animation.gif"
gganimate::anim_save(final_animation_file, animate(p, nframes = 200, duration = 25, end_pause = 15), renderer = gifski_renderer)

# Display the animation in the R Markdown document
knitr::include_graphics(final_animation_file)

```
