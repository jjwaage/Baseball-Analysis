---
title: "Estimating Playoffs Based on the Previous Year's Data"
author: "Jonna Waage"
date: "2023-05-31"
---

## Can the MLB Playoff contending teams be estimated with just last year's win-loss data?

```{r setup, include=FALSE}
install.packages("gganimate")
library(tidyverse)
library(dplyr)
library("readxl")
knitr::opts_chunk$set(echo = TRUE,
                      message = FALSE,
                      warning = FALSE)
library(ggplot2)
library(MASS)
library(scales)
library(reshape2)
library(data.table)
```

### Introduction

There are many different algorithms that try to simulate the next MLB season with a lot of complex statistics. The goal of this was to learn about this model and see how accurate a simulation can be with just a couple simple statistics taken into account.

This program simulates a 2023 season of all 162 games using the Bradley-Terry model. It uses last year's run differentials (average runs scored minus average runs allowed) to try to estimate this year's top performers.

### Data

`schedule1 <- read_excel("schedule.xlsx")` - reads in a two column excel sheet with headers 'Home' and 'Away' and teams from each game listed below

2022 statistics are from [here](https://www.baseball-reference.com/leagues/majors/2022.shtml).

### Calculations

The [Bradley-Terry model](https://en.wikipedia.org/wiki/Bradley%E2%80%93Terry_model) is a probability model to predict outcomes of object i beating object j based on each objects ability or talent. In this instance, it is used to compare teams but it was originally to be used with players.

Talent is calculated by z-scores of seasonal average run differential of each team and then divided by 10. The talents were divided by 10 to decrease variation between teams even more. It is then adjusted for home field advantage so 0.04, based on [this](https://sabr.org/journal/article/home-field-advantage/#:~:text=In%20every%20sport%20and%20at,percent%20of%20the%20games%20played.) article, is added to the probability of the home team winning.

The equation used in this project for probability is:

```         
prob.Home = exp(Talent.Home) / (exp(Talent.Home) + exp(Talent.Visitor)) + 0.04)
```

Then, that probability is plugged into another equation to calculate a winner from each game.

```         
outcome = rbinom(nrow(.), 1, prob.Home), winner = ifelse(outcome, Home, Visitor))
```

This equation uses [rbinom](https://www.programmingr.com/examples/neat-tricks/sample-r-function/r-rbinom/) which simulates a series of Bernoulli trials and returns the results. This returns a 1 if the home team wins and a 0 if the visiting team wins.

```{r, echo = FALSE}
one.simulation <- function() {
  require(dplyr)

  NL_East <- c("Atlanta Braves", "Miami Marlins", "New York Mets","Philadelphia Phillies","Washington Nationals")
  
  NL_Cent <- c("Chicago Cubs", "Cincinnati Reds","Milwaukee Brewers", "Pittsburgh Pirates", "St. Louis Cardinals")
  
  NL_West <- c("Arizona Diamondbacks", "Colorado Rockies", "Los Angeles Dodgers","San Diego Padres", "San Francisco Giants")
  
  AL_East <- c("Baltimore Orioles", "Boston Red Sox","New York Yankees", "Tampa Bay Rays","Toronto Blue Jays")
  
  AL_Cent <- c("Chicago White Sox", "Cleveland Guardians","Detroit Tigers", "Kansas City Royals","Minnesota Twins")
  
  AL_West <- c("Oakland Athletics", "Houston Astros","Texas Rangers", "Los Angeles Angels","Seattle Mariners")

  teams <- c(NL_East, NL_Cent, NL_West,
             AL_East, AL_Cent, AL_West)
  
  league <- c(rep("NL", 15), rep("AL", 15))
  
  division <- c(rep("NL_East", 5), rep("NL_Cent", 5),
                rep("NL_West", 5), rep("AL_East", 5),
                rep("AL_Cent", 5), rep("AL_West", 5))
  
  Team_info <- data.frame(Team = teams,
                          League = league,
                          Division = division)
  Teams <- sort(teams)
  
  schedule <- read_excel("schedule.xlsx")
  battingstats <- read_excel("2022battingstats.xlsx")
  fieldingstats <- read_excel("fieldingstats2022.xlsx")
  
  runs_per_game <- (battingstats$RG)
  runs_against <- (fieldingstats$RAG)
  
  stats <- (runs_per_game - runs_against)
  stats <- (stats-mean(stats))/sd(stats)
  
  # simulate talents
  talents <- (stats / 10)
  # what <- t(rbind(Teams, runs_per_game, runs_against, stats))
  TAL <- tibble(Team = Teams, Talent = talents)
  
  # merge talents and win probs with schedule data frame
  SCH <- schedule %>%
    inner_join(TAL, by = c("Home" = "Team")) %>%
    rename(Talent.Home = Talent) %>%
    inner_join(TAL, by = c("Visitor" = "Team")) %>%
    rename(Talent.Visitor = Talent)

  # play season of games
  SCH %>% 
    mutate(prob.Home = exp(Talent.Home) /
             (exp(Talent.Home) + exp(Talent.Visitor)) + 0.04) -> SCH
  
  SCH %>%
    mutate(outcome = rbinom(nrow(.), 1, prob.Home),
           winner = ifelse(outcome, 
                      Home, Visitor)) -> SCH
  
  # compute number of games won for all teams
  SCH %>% 
    group_by(winner) %>%
    summarize(Wins = n(), .groups = "drop") %>%
    inner_join(TAL, by = c("winner" = "Team")) -> 
    RESULTS
  
  # add team info
   RESULTS <- inner_join(RESULTS, Team_info,
                         by = c("winner" = "Team"))
   
   # determine division winners
    out <- RESULTS %>%
      mutate(Winner.Div = 0, 
             prob = exp(Talent),
             outcome = sample(nrow(.), prob = prob)) %>%
      arrange(Division, desc(Wins), outcome) %>%
      dplyr::select(-outcome)
    out[c(1, 6, 11, 16, 21, 26), "Winner.Div"] <- 1
  
  # determine wild card teams
    
    out2 <- out %>% 
      mutate(Wild.Card = 0,
      outcome = sample(nrow(.), prob = prob)) %>%
      slice(- c(1, 6, 11, 16, 21, 26)) %>% 
      arrange(League, desc(Wins), outcome) %>% 
      dplyr::select(-outcome)
    out2[c(1, 2, 3, 13, 14, 15), "Wild.Card"] <- 1
    
    # put all data together
    
    out$Wild.Card <- 0
    out_final <- rbind(out[c(1, 6, 11, 16, 21, 26), ],
                       out2) %>% 
      arrange(Division, desc(Wins)) %>% 
      dplyr::select(-prob) %>% 
      mutate(Team = winner) %>% 
      dplyr::select(Team, League, Division, 
                    Talent, Wins, 
             Winner.Div, Wild.Card)
    
    out_final
}

print_al <- function(out2){
  out2 %>%
     mutate(Losses = 162 - Wins) -> out2
  
  al <- cbind(out2[6:10, 1],out2[6:10, 5], out2[6:10, 8],
           out2[1:5, 1], out2[1:5, 5], out2[1:5, 8],
           out2[11:15, 1],  out2[11:15, 5],  out2[11:15, 8])

  colnames(al)<-c("AL East", "Wins", "Losses", "AL Cent", "Wins", "Losses",
                  "AL West", "Wins", "Losses")

   knitr::kable(al, align = "crlcrlcrl")
}

print_nl <- function(out2) {
    out2 %>%
     mutate(Losses = 161 - Wins) -> out2
  
    nl <- cbind(out2[21:25, 1], out2[21:25, 5], out2[21:25, 8],
              out2[16:20, 1], out2[16:20, 5], out2[16:20, 8],
              out2[26:30, 1], out2[26:30, 5], out2[26:30, 8])
    
    colnames(nl)<-c("NL East", "Wins", "Losses", "NL Cent", "Wins", "Losses",
                  "NL West", "Wins", "Losses")
    
    knitr::kable(nl, align = "crlcrlcrl")
    
}

```

### One simulation

One season simulation with Wins and Losses from each team using the Bradley Terry model to predict each game.

```{r, echo=FALSE}
out <- one.simulation()
print_nl(out)
print_al(out)
```

### 1000 Season Simulations

```{r, echo = FALSE}
all_out <- NULL  
for(j in 1:1000){
  out <- one.simulation()
  out$Simulation <- j
  all_out <- rbind(all_out, out)
}
```

#### Playoff Percentage

Here is the percentage of seasons in 1000 simulations where each team made the playoffs.

```{r, echo = FALSE}

all_out %>%
  mutate(Level = as.factor(2 * (Winner.Div == 1) + (Wild.Card == 1))) -> all_out

playoffs <- NULL

all_out <- all_out %>% 
  mutate(playoffs = Winner.Div + Wild.Card)

playoffsummary <- all_out %>% 
  group_by(Division, Team) %>%
  summarize(percentplayoffs = sum(playoffs) / 1000)

colnames(playoffsummary) <- c("Division", "Team", "Percent Playoffs Made")

playoffsummary <- playoffsummary[order(playoffsummary$`Division`, playoffsummary$`Percent Playoffs Made`, decreasing = TRUE), ]

playoffpercent <- playoffsummary

playoffsummary$`Percent Playoffs Made` <- percent(playoffsummary$`Percent Playoffs Made`, accuracy=0.1)

al <- cbind(playoffsummary[21:25, 2],playoffsummary[21:25, 3],
           playoffsummary[26:30, 2], playoffsummary[26:30, 3],
           playoffsummary[16:20, 2], playoffsummary[16:20, 3])

colnames(al)<-c("AL East", "Playoff %", "AL Cent", "Playoff %",
                  "AL West", "Playoff %")

nl <- cbind(playoffsummary[6:10, 2], playoffsummary[6:10, 3], 
            playoffsummary[11:15, 2], playoffsummary[11:15, 3], 
            playoffsummary[1:5, 2], playoffsummary[1:5, 3])
    
colnames(nl)<-c("NL East", "Playoff %", "NL Cent", "Playoff %",
                  "NL West", "Playoff %")

knitr::kable(nl, align = "lclclc")
knitr::kable(al, align = "lclclc")

```

#### Win Percentage

Here is the percentage of wins each team had after 1000 seasons

```{r, echo=FALSE}
winpercent <- NULL

all_out <- all_out %>% 
  mutate(winpercent = Wins)

winpercent <- all_out %>% 
  group_by(Division, Team) %>%
  summarize(winpercent = sum(Wins) / 162000)

colnames(winpercent) <- c("Division", "Team", "Percent Wins")


winpercent <- winpercent[order(winpercent$`Division`, winpercent$`Percent Wins`, decreasing = TRUE), ]

winpercent$`Percent Wins` <- percent(winpercent$`Percent Wins`, accuracy = 0.1)

al <- cbind(winpercent[21:25, 2],winpercent[21:25, 3],
           winpercent[26:30, 2], winpercent[26:30, 3],
           winpercent[16:20, 2], winpercent[16:20, 3])

colnames(al)<-c("AL East", "Win %", "AL Cent", "Win %",
                  "AL West", "Win %")

nl <- cbind(winpercent[6:10, 2], winpercent[6:10, 3], 
            winpercent[11:15, 2], winpercent[11:15, 3], 
            winpercent[1:5, 2], winpercent[1:5, 3])
    
colnames(nl)<-c("NL East", "Win %", "NL Cent", "Win %",
                  "NL West", "Win %")

knitr::kable(nl, align = "lclclc")
knitr::kable(al, align = "lclclc")

winpercent <- winpercent[order(winpercent$`Division`, winpercent$`Team`),]

```

### 2023 Season Actual Statistics

Here are the current standings and win percentages of each team in the MLB as of Sept 6th

<!-- ::: callout-note -->

<!-- Looking good. We should update this for current data. In a lot of the preceding code and the following chunk you are taking a pretty blunt approach to setting up your data frames. We should change this so that your tables can be dynamically updated. -->

<!-- ::: -->

```{r, echo=FALSE}
aldivisions <- c("AL East", "AL Cent", "AL West")

  AL_East <- c("Baltimore Orioles","Tampa Bay Rays", "Toronto Blue Jays", "Boston Red Sox", "New York Yankees")
  
  ALe_percent <- c("62.3%","61.1%", "54.9%","50.6%","48.1%") 
  
  AL_Cent <- c("Minnesota Twins", "Cleveland Guardians", "Detroit Tigers", "Chicago White Sox", "Kansas City Royals")
  
  ALc_percent <- c("53.7%", "48.1%", "46.9%",  "37.7%", "34.6%")
  
  AL_West <- c("Houston Astros","Seattle Mariners", "Texas Rangers", "Los Angeles Angels","Oakland Athletics")
  
  ALw_percent <- c("55.6%", "55.6%","54.3%","45.1%", "30.9%")

  al_ <- cbind(AL_East, ALe_percent, AL_Cent,  ALc_percent, AL_West,  ALw_percent)

  colnames(al_)<-c("AL East", "Win %", "AL Cent", "Win %", "AL West", "Win %")

  
nldivisions <- c("NL East", "NL Cent", "NL West")

  NL_East <- c("Atlanta Braves", "Philadelphia Phillies", "Miami Marlins", "New York Mets","Washington Nationals")
  
  NLe_percent <- c("64.2%","55.6%","51.9%" ,"46.3%", "43.8%")

  NL_Cent <- c("Milwaukee Brewers", "Chicago Cubs", "Cincinnati Reds", "Pittsburgh Pirates", "St. Louis Cardinals")
  
  NLc_percent <- c("56.8%", "51.2%","50.6%","46.9%","43.8%")

  NL_West <- c("Los Angeles Dodgers", "Arizona Diamondbacks", "San Francisco Giants", "San Diego Padres", "Colorado Rockies")
  
  NLw_percent <- c("61.7%", "51.9%", "50.6%", "48.8%", "36.4%")
  
  nl_ <- cbind(NL_East, NLe_percent, NL_Cent, NLc_percent, NL_West, NLw_percent)

  colnames(nl_)<-c("NL East", "Win %", "NL Cent" , "Win %", "NL West", "Win %")

knitr::kable(nl_)
knitr::kable(al_)

```

### Comparison of Projected and Actual Statistics

Here are the projected winning percentage and the actual winning percentage side by side

```{r, echo = FALSE}
  NL_East <- c("Atlanta Braves", "Philadelphia Phillies", "Miami Marlins", "New York Mets","Washington Nationals")
  
  NLe_percent <- c("65.5%","55.4%","51.4%" ,"46%", "45%")
  
  NL_Cent <- c("Milwaukee Brewers", "Chicago Cubs", "Cincinnati Reds", "Pittsburgh Pirates", "St. Louis Cardinals")
  
  NLc_percent <- c("55.4%", "53.9%","51.4%","46.4%","43.6%")

  NL_West <- c("Los Angeles Dodgers", "Arizona Diamondbacks", "San Francisco Giants", "San Diego Padres", "Colorado Rockies")
  
  NLw_percent <- c("61.2%", "51.8%", "50%", "46.8%", "36.7%")
  
  nl_ <- cbind(NL_East, NLe_percent, winpercent[21:25, 3], NL_Cent, NLc_percent,winpercent[16:20, 3], NL_West, NLw_percent, winpercent[26:30, 3])
  
  colnames(nl_)<-c("NL East", "Actual Win %", "Projected Win %", "NL Cent" , "Actual Win %", "Projected Win %", "NL West", "Actual Win %", "Projected Win %")

knitr::kable(nl_, align = "lcclcclcc")



  
  AL_East <- c("Baltimore Orioles","Tampa Bay Rays", "Toronto Blue Jays", "Boston Red Sox", "New York Yankees")
  
  ALe_percent <- c("63.3%","60.3%", "55%","51.4%","50%") 
  
  AL_Cent <- c("Minnesota Twins", "Cleveland Guardians", "Detroit Tigers", "Chicago White Sox", "Kansas City Royals")
  
  ALc_percent <- c("52.1%", "47.9%", "45.7%",  "38.6%", "31.2%")
  
  AL_West <- c("Houston Astros","Seattle Mariners", "Texas Rangers", "Los Angeles Angels","Oakland Athletics")
  
  ALw_percent <- c("56.7%", "56.4%","54.7%","45.7%", "36.5%")

  al_ <- cbind(AL_East, ALe_percent, winpercent[6:10, 3], AL_Cent,  ALc_percent, winpercent[1:5, 3], AL_West,  ALw_percent, winpercent[11:15, 3])
  
  colnames(al_)<-c("AL East", "Actual Win %", "Projected Win %", "AL Cent" , "Actual Win %", "Projected Win %", "AL West", "Actual Win %", "Projected Win %")

knitr::kable(al_, align = "lcclcclcc")
```

```{r, echo = FALSE}
alewin <- c(winpercent[6, 3],winpercent[7, 3],winpercent[8, 3],winpercent[9, 3],winpercent[10, 3])

alewin <-as.numeric(sub("%", "", alewin))
ALe_percent <- as.numeric(sub("%", "", ALe_percent))

graphal <- rbind(ALe_percent, alewin)
graphal <- data.frame(graphal)
names(graphal) <- c("BAL", "TB", "TOR", "BOS", "NYY")

x <- barplot(as.matrix(graphal), main="American League East", ylab="Percentage of Wins", ylim = c(0, 100), 
             beside=TRUE, col = c("#00006B", "#9fe2ff"))

y <- as.matrix(graphal)

text(x,y + 4,cex = 0.75, labels = as.character(y))


legend("topleft", c("Actual Win Percentage","Projected Win Percentage"), cex=1.0, bty="n", fill = c("#00006B", "#9fe2ff"))


```

```{r, echo = FALSE}
alcwin <- c(winpercent[1, 3],winpercent[2, 3],winpercent[3, 3],winpercent[4, 3],winpercent[5, 3])

alcwin <-as.numeric(sub("%", "", alcwin))
ALc_percent <- as.numeric(sub("%", "", ALc_percent))

graphalc <- rbind(ALc_percent, alcwin)
graphalc <- data.frame(graphalc)
names(graphalc) <- c("MIN", "CLE", "DET", "CWS", "KAN")

x <- barplot(as.matrix(graphalc), main="American League Central", ylab="Percentage of Wins", ylim = c(0, 100), 
             beside=TRUE, col = c("#00006B", "#9fe2ff"))

y <- as.matrix(graphalc)

text(x,y + 4,cex = 0.75, labels = as.character(y))


legend("topleft", c("Actual Win Percentage","Projected Win Percentage"), cex=1.0, bty="n", fill = c("#00006B", "#9fe2ff"))


```

```{r, echo = FALSE}
alwwin <- c(winpercent[11, 3],winpercent[12, 3],winpercent[13, 3],winpercent[14, 3],winpercent[15, 3])

alwwin <-as.numeric(sub("%", "", alwwin))
ALw_percent <- as.numeric(sub("%", "", ALw_percent))

graphalw <- rbind(ALw_percent, alwwin)
graphalw <- data.frame(graphalw)
names(graphalw) <- c("HOU", "SEA", "TEX", "LAA", "OAK")

x <- barplot(as.matrix(graphalw), main="American League West", ylab="Percentage of Wins", ylim = c(0, 100), 
             beside=TRUE, col = c("#00006B", "#9fe2ff"))

y <- as.matrix(graphalw)

text(x,y + 4,cex = 0.75, labels = as.character(y))


legend("topleft", c("Actual Win Percentage","Projected Win Percentage"), cex=1.0, bty="n", fill = c("#00006B", "#9fe2ff"))

```

```{r, echo = FALSE}
nlewin <- c(winpercent[21, 3],winpercent[22, 3],winpercent[23, 3],winpercent[24, 3],winpercent[25, 3])

nlewin <-as.numeric(sub("%", "", nlewin))
NLe_percent <- as.numeric(sub("%", "", NLe_percent))

graphnle <- rbind(NLe_percent, nlewin)
graphnle <- data.frame(graphnle)
names(graphnle) <- c("ATL", "PHI","MIA", "NYM", "WAS")

x <- barplot(as.matrix(graphnle), main="National League East", ylab="Percentage of Wins", ylim = c(0, 100), 
             beside=TRUE, col = c("#940119", "#de0226"))

y <- as.matrix(graphnle)

text(x,y + 4,cex = 0.75, labels = as.character(y))


legend("topleft", c("Actual Win Percentage","Projected Win Percentage"), cex=1.0, bty="n", fill = c("#940119", "#de0226"))

```

```{r, echo = FALSE}
nlcwin <- c(winpercent[16, 3],winpercent[17, 3],winpercent[18, 3],winpercent[19, 3],winpercent[20, 3])

nlcwin <-as.numeric(sub("%", "", nlcwin))
NLc_percent <- as.numeric(sub("%", "", NLc_percent))

graphnlc <- rbind(NLc_percent, nlcwin)
graphnlc <- data.frame(graphnlc)
names(graphnlc) <- c( "MIL", "CHC", "CIN", "PIT", "STL")

x <- barplot(as.matrix(graphnlc), main="National League Central", ylab="Percentage of Wins", ylim = c(0, 100), 
             beside=TRUE, col = c("#940119", "#de0226"))

y <- as.matrix(graphnlc)

text(x,y + 4,cex = 0.75, labels = as.character(y))


legend("topleft", c("Actual Win Percentage","Projected Win Percentage"), cex=1.0, bty="n", fill = c("#940119", "#de0226"))

```

```{r, echo = FALSE}
nlwwin <- c(winpercent[26, 3],winpercent[27, 3],winpercent[28, 3],winpercent[29, 3],winpercent[30, 3])

nlwwin <-as.numeric(sub("%", "", nlwwin))
NLw_percent <- as.numeric(sub("%", "", NLw_percent))

graphnlw <- rbind(NLw_percent, nlwwin)
graphnlw <- data.frame(graphnlw)
names(graphnlw) <- c("LAD", "ARI","SF", "SD", "COL")

x <- barplot(as.matrix(graphnlw), main="National League West", ylab="Percentage of Wins", ylim = c(0, 100), 
             beside=TRUE, col = c("#940119", "#de0226"))

y <- as.matrix(graphnlw)

text(x,y + 4,cex = 0.75, labels = as.character(y))


legend("topleft", c("Actual Win Percentage","Projected Win Percentage"), cex=1.0, bty="n", fill = c("#940119", "#de0226"))

```

### Comparison of Projected and Actual Statistics - Playoffs

```{r, echo = FALSE}

realplayoffperc <- c(1, .403, 0.1, .342, 0.0, 1, 0.0, .957, .238, 0.0, 0.0, .996, .769, .294, 0.0, .968, .775, .789, 0.0, 0.0, .03, .461, 1, 1, 0.04, 0.02, .998, 0.0, 0.0, 0.0)

playoffs <- cbind(playoffpercent, realplayoffperc)
data <- playoffs[0:30,3:4]

playoffperc <- as.numeric(unlist(data[, 1]))


plot(data, cex = 0.5, pch = 16, xlab = "Projected Chance of Making Playoffs", ylab = "Chances of Making 2023 Playoffs 9/14", col = "blue")
abline(lm(realplayoffperc ~ playoffperc), col = "red")

save(playoffsummary, file = "/Users/jonnawaage/Documents/GitHub/Baseball Analysis/posts/Win Projection/playoffsummarydata.RData")

```

The slope from this regression line is r = 0.82592 and r\^2 = 0.6821. This shows there is a strong positive correlation between my projection and the teams that are most likely to make the playoffs. This shows that it can be estimated fairly well whether or not teams make the playoffs based off of just win differential of the previous year and home field advantage.

### Links to resources used

[How FiveThirtyEight does their predictions](https://fivethirtyeight.com/features/how-our-mlb-predictions-work/)

[Playoff Simulator](https://playoffpredictors.com/Baseball?L=Aw18ZXTt-DFOS1b0c17Pd-wYUcSaWeRZVdTbXfQ408y6xQEwCMw7wn7Azvy6CuQ4QLHD+QqZMkyxI+VPEy1I6UtnilowVp3KFE3etOztpqzq2rFB9XN1Xjh88flnH+h06+Wii6WyiESns4qXgoGAYHSZua2blEa9h4ebi7OGgmGomqF4XklTmFpiY5hkRkOoQVV+rHRVRXJKu7BJkFZ1SFNRd2teq3JpWNVPHKaSQkdMz2aNrNZJqOhifEBC4E+Q8F2xTGpMeEDFSfcuctrS0bzm3W9RrkHhafWC8eucz92jUI+BtohZfGDrHkAUtpp1topEEA)

[Simulator in R](https://baseballwithr.wordpress.com/2020/06/29/simulating-a-60-game-season/)

[2022 Updated Playoffs](https://www.sportingnews.com/us/mlb/news/mlb-expanded-playoffs-postseason-2022-teams/sayv4pysmmlopks7hg2o2lbv)

[Home Field Advantage](https://sabr.org/journal/article/home-field-advantage/#:~:text=In%20every%20sport%20and%20at,percent%20of%20the%20games%20played.)

[Contributing Factors in Increasing Winning Percentage](https://digitalcommons.bryant.edu/cgi/viewcontent.cgi?article=1021&context=honors_finance#:~:text=Potential%20factors%20that%20affect%20winning,home%20runs%2C%20runs%20batted%20in)

[2022 Stats](https://www.baseball-reference.com/leagues/majors/2022.shtml)

[2023 Playoff Chances](https://www.fangraphs.com/standings/playoff-odds/fg/div)
