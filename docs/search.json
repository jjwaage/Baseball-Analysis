[
  {
    "objectID": "posts/Resources/index.html",
    "href": "posts/Resources/index.html",
    "title": "Resources",
    "section": "",
    "text": "Links to resources used\nHow FiveThirtyEight does their predictions\nPlayoff Simulator\nSimulator in R\n2022 Updated Playoffs\nHome Field Advantage\nContributing Factors in Increasing Winning Percentage\n2022 Stats"
  },
  {
    "objectID": "posts/Mariners Playoff Analysis/index.html",
    "href": "posts/Mariners Playoff Analysis/index.html",
    "title": "Mariners Playoff Analysis",
    "section": "",
    "text": "If the rest of the MLB games this season were decided by a coin flip, would the Mariners make the playoffs?\n\nIntroduction\nSimulates a 2023 season of all 161 games using the Bradley-Terry model.\nBy repeated simulations, can explore the relationship between talent and season performance.\nTalent has been edited so that it is decided by z-scores of average runs score - average runs allowed by each team and then divided by 10.\n\n\nMain functions\nRead in two functions:\n\none.simulation() performs the simulation\nprint_standings() prints the division standings of the simulation\n\nReads in the data:\n\nschedule1 <- read_excel(\"schedule.xlsx\") reads in a two column excel sheet with headers ‘Home’ and ‘Away’ and teams from each game listed below\nbattingstats <- read_excel(\"2022battingstats.xlsx\") reads in a excel sheet with 2022 MLB batting statistics for all teams\nfieldingstats <- read_excel(\"fieldingstats2022.xlsx\")reads in a excel sheet with 2022 MLB fielding statistics for all teams\n\n\n\n\nAlso I am adding several helper functions increasefont() and centertitle() that I will use in ggplot2.\n\nincreasefont <- function(Size = 18){\n  theme(text = element_text(size = Size))\n}\n\ncentertitle <- function(Color = \"blue\"){\n    theme(plot.title = \n            element_text(colour = Color, size = 18, \n        hjust = 0.5, vjust = 0.8, angle = 0))\n}\n\n\n\nOne simulation\nOne season simulation with Wins and Losses from each team\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNL East\nWins\nLosses\nNL Cent\nWins\nLosses\nNL West\nWins\nLosses\n\n\n\n\nAtlanta Braves\n99\n62\nCincinnati Reds\n91\n70\nLos Angeles Dodgers\n97\n64\n\n\nPhiladelphia Phillies\n85\n76\nMilwaukee Brewers\n86\n75\nSan Diego Padres\n86\n75\n\n\nMiami Marlins\n81\n80\nSt. Louis Cardinals\n81\n80\nColorado Rockies\n85\n76\n\n\nNew York Mets\n74\n87\nChicago Cubs\n74\n87\nArizona Diamondbacks\n81\n80\n\n\nWashington Nationals\n72\n89\nPittsburgh Pirates\n67\n94\nSan Francisco Giants\n79\n82\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAL East\nWins\nLosses\nAL Cent\nWins\nLosses\nAL West\nWins\nLosses\n\n\n\n\nTampa Bay Rays\n93\n68\nChicago White Sox\n89\n72\nSeattle Mariners\n92\n69\n\n\nBaltimore Orioles\n88\n73\nMinnesota Twins\n82\n79\nHouston Astros\n82\n79\n\n\nToronto Blue Jays\n86\n75\nCleveland Guardians\n76\n85\nTexas Rangers\n68\n93\n\n\nNew York Yankees\n85\n76\nDetroit Tigers\n72\n89\nOakland Athletics\n66\n95\n\n\nBoston Red Sox\n78\n83\nKansas City Royals\n69\n92\nLos Angeles Angels\n66\n95\n\n\n\n\n\n\n\n1000 Simulations\nStore the results of 1000 simulated seasons:\n\nall_out <- NULL  \nfor(j in 1:100){\n  out <- one.simulation()\n  out$Simulation <- j\n  all_out <- rbind(all_out, out)\n}\n\n\n\nTalent and probability of making playoffs\nDefine a new variable Level that is 0 (missed playoffs), 1 (wild-card), or 2 (win division).\n\n\n\nPrinting percentage of playoffs made from each team over 1000 seasons.\n\n\n\n\n\nTeam\nPercent Playoffs Made\n\n\n\n\nArizona Diamondbacks\n0.29\n\n\nAtlanta Braves\n0.70\n\n\nBaltimore Orioles\n0.30\n\n\nBoston Red Sox\n0.27\n\n\nChicago Cubs\n0.35\n\n\nChicago White Sox\n0.32\n\n\nCincinnati Reds\n0.10\n\n\nCleveland Guardians\n0.52\n\n\nColorado Rockies\n0.13\n\n\nDetroit Tigers\n0.17\n\n\nHouston Astros\n0.76\n\n\nKansas City Royals\n0.16\n\n\nLos Angeles Angels\n0.33\n\n\nLos Angeles Dodgers\n0.86\n\n\nMiami Marlins\n0.20\n\n\nMilwaukee Brewers\n0.48\n\n\nMinnesota Twins\n0.45\n\n\nNew York Mets\n0.59\n\n\nNew York Yankees\n0.78\n\n\nOakland Athletics\n0.08\n\n\nPhiladelphia Phillies\n0.50\n\n\nPittsburgh Pirates\n0.11\n\n\nSan Diego Padres\n0.45\n\n\nSan Francisco Giants\n0.52\n\n\nSeattle Mariners\n0.45\n\n\nSt. Louis Cardinals\n0.66\n\n\nTampa Bay Rays\n0.53\n\n\nTexas Rangers\n0.32\n\n\nToronto Blue Jays\n0.56\n\n\nWashington Nationals\n0.06\n\n\n\n\n\nLevel is an ordinal response variable. Using a proportional odds model, model the ordinal response as a function of the team’s talent.\nFor a range of talent values from -0.9 to 0.9, find the fitted model probability of the three outcomes.\n\npfit <- polr(Level ~ Talent,\n             data = all_out)\nDF <- data.frame(Talent = seq(-0.9, 0.9,\n                                  length.out = 200))\nProb <- predict(pfit, DF, type = \"probs\")\nDF1 <- DF2 <- DF3 <- DF\nDF1$Probability <- Prob[, 3]; DF1$Type <- \"Division\"\nDF2$Probability <- Prob[, 2]; DF2$Type <- \"Wild Card\"\nDF3$Probability <- Prob[, 3] + Prob[, 2]\nDF3$Type <- \"Playoff\"\nDFall <- rbind(DF1, DF2, DF3)\n\nGraph of this division, wild card, and playoff probabilities.\n\nggplot(DFall, aes(Talent, Probability,\n                  color = Type)) +\n  geom_line() +\n  increasefont() +\n  ggtitle(\"Probability of Reaching Different Levels\") +\n  centertitle()\n\n\n\n\n\n\nTalents of wild card teams and division-winners\nConstruct density estimates of\n\nall teams\nteams that win division\nteams that get wild card\n\n\ndata1 <- filter(all_out, Wild.Card == 1) %>% \n         mutate(Type = \"Wild Card\")\ndata2 <- filter(all_out, Winner.Div == 1) %>% \n  mutate(Type = \"Win Division\")\ndata3 <- all_out %>% \n  mutate(Type = \"All Teams\")\n\nggplot(rbind(data1, data2, data3), \n       aes(Talent, color = Type)) +\n  geom_density(size = 1.5) +\n  increasefont() + centertitle() +\n  ggtitle(\"Talent Distributions for Three Types of Teams\")\n\n\n\n\n\n\nHow many games to win?\nFind the conditional probability of winning division title, of getting wild card, and making the playoffs given you won X games.\n\nall_out %>% \n  filter(Wins >= 25, Wins <= 45) %>% \n  group_by(Wins) %>% \n  summarize(N = n(), \n            Prob_Div = mean(Winner.Div),\n            Prob_WC = mean(Wild.Card),\n            .groups = \"drop\") -> S\n\nPlot smooths of these empirical probabilities.\n\nS %>% \n  ggplot() +\n  geom_smooth(aes(Wins, Prob_Div), se = FALSE,\n              color = \"red\",\n              method = \"loess\") +\n  geom_smooth(aes(Wins, Prob_WC), se = FALSE,\n              color = \"blue\",\n              method = \"loess\") + \n  geom_smooth(aes(Wins, Prob_Div + Prob_WC),\n                  se = FALSE,\n              color = \"black\",\n              method = \"loess\") +\n  increasefont() +\n  ylab(\"Probability\") +\n  annotate(geom = \"text\", x = 32, y = 0.75,\n           label = \"Playoffs\", size = 7) +\n  annotate(geom = \"text\", x = 40.3, y = 0.75,\n           label = \"Division\", size = 7,\n           color = \"red\") +\n  annotate(geom = \"text\", x = 40.8, y = 0.25,\n           label = \"Wild Card\", size = 7,\n           color = \"blue\") +\n  ggtitle(\"How Many Games Does Team Need to Win?\") +\n  centertitle()\n\n\n\n\n````"
  },
  {
    "objectID": "posts/Barrie/index.html",
    "href": "posts/Barrie/index.html",
    "title": "2020 Season Simulation",
    "section": "",
    "text": "Introduction\nSimulates a 2020 season of 60 games using the Bradley-Terry model.\nBy repeated simulations, can explore the relationship between talent and season performance.\n\n\nMain functions\nRead in two functions:\n\none.simulation.20() performs the simulation\nprint_standings() prints the division standings of the simulation\n\n\n\n\nRead in several packages that I’ll need.\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(MASS)\n\nAlso I am adding several helper functions increasefont() and centertitle() that I will use in ggplot2.\n\nincreasefont <- function(Size = 18){\n  theme(text = element_text(size = Size))\n}\ncentertitle <- function(Color = \"blue\"){\n    theme(plot.title = \n            element_text(colour = Color, size = 18, \n        hjust = 0.5, vjust = 0.8, angle = 0))\n}\n\n\n\nOne simulation\nOne simulation assuming a standard deviation of 0.3.\n\nset.seed(123)\nout <- one.simulation.20(0.3)\nprint_standings(out)\n\n                             \n  AL East  W  L NL East  W  L\n  ------------- -------------\n      BAL 39 21     NYN 37 23\n      TBA 37 23     WAS 30 30\n      BOS 36 24     PHI 28 32\n      TOR 25 35     MIA 25 35\n      NYA 21 39     ATL 22 38\n                             \n  AL Cent  W  L NL Cent  W  L\n  ------------- -------------\n      MIN 33 27     CHN 37 23\n      KCR 32 28     PIT 33 27\n      CHA 32 28     SLN 29 31\n      CLE 30 30     CIN 28 32\n      DET 29 31     MIL 17 43\n                             \n  AL West  W  L NL West  W  L\n  ------------- -------------\n      SEA 40 20     COL 34 26\n      HOU 32 28     SDN 33 27\n      TEX 26 34     LAN 32 28\n      LAA 25 35     ARI 29 31\n      OAK 24 36     SFN 25 35\n\n\n\n\n1000 Simulations\nStore the results of 1000 simulated seasons:\n\nall_out <- NULL\nfor(j in 1:1000){\n  out <- one.simulation.20(0.3)\n  out$Simulation <- j\n  all_out <- rbind(all_out, out)\n}\n\n\n\nTalent and probability of making playoffs\nDefine a new variable Level that is 0 (missed playoffs), 1 (wild-card), or 2 (win division).\n\nall_out %>% \n  mutate(Level = as.factor(2 * (Winner.Div == 1) +\n                 (Wild.Card == 1))) -> all_out\n\nLevel is an ordinal response variable. Using a proportional odds model, model the ordinal response as a function of the team’s talent.\nFor a range of talent values from -0.9 to 0.9, find the fitted model probability of the three outcomes.\n\npfit <- polr(Level ~ Talent,\n             data = all_out)\nDF <- data.frame(Talent = seq(-0.9, 0.9,\n                                  length.out = 200))\nProb <- predict(pfit, DF, type = \"probs\")\nDF1 <- DF2 <- DF3 <- DF\nDF1$Probability <- Prob[, 3]; DF1$Type <- \"Division\"\nDF2$Probability <- Prob[, 2]; DF2$Type <- \"Wild Card\"\nDF3$Probability <- Prob[, 3] + Prob[, 2]\nDF3$Type <- \"Playoff\"\nDFall <- rbind(DF1, DF2, DF3)\n\nGraph of this division, wild card, and playoff probabilities.\n\nggplot(DFall, aes(Talent, Probability,\n                  color = Type)) +\n  geom_line() +\n  increasefont() +\n  ggtitle(\"Probability of Reaching Different Levels\") +\n  centertitle()\n\n\n\n\n\n\nTalents of wild card teams and division-winners\nConstruct density estimates of\n\nall teams\nteams that win division\nteams that get wild card\n\n\ndata1 <- filter(all_out, Wild.Card == 1) %>% \n         mutate(Type = \"Wild Card\")\ndata2 <- filter(all_out, Winner.Div == 1) %>% \n  mutate(Type = \"Win Division\")\ndata3 <- all_out %>% \n  mutate(Type = \"All Teams\")\n\nggplot(rbind(data1, data2, data3), \n       aes(Talent, color = Type)) +\n  geom_density(size = 1.5) +\n  increasefont() + centertitle() +\n  ggtitle(\"Talent Distributions for Three Types of Teams\")\n\n\n\n\n\n\nHow many games to win?\nFind the conditional probability of winning division title, of getting wild card, and making the playoffs given you won X games.\n\nall_out %>% \n  filter(Wins >= 25, Wins <= 45) %>% \n  group_by(Wins) %>% \n  summarize(N = n(), \n            Prob_Div = mean(Winner.Div),\n            Prob_WC = mean(Wild.Card),\n            .groups = \"drop\") -> S\n\nPlot smooths of these empirical probabilities.\n\nS %>% \n  ggplot() +\n  geom_smooth(aes(Wins, Prob_Div), se = FALSE,\n              color = \"red\",\n              method = \"loess\") +\n  geom_smooth(aes(Wins, Prob_WC), se = FALSE,\n              color = \"blue\",\n              method = \"loess\") + \n  geom_smooth(aes(Wins, Prob_Div + Prob_WC),\n                  se = FALSE,\n              color = \"black\",\n              method = \"loess\") +\n  increasefont() +\n  ylab(\"Probability\") +\n  annotate(geom = \"text\", x = 32, y = 0.75,\n           label = \"Playoffs\", size = 7) +\n  annotate(geom = \"text\", x = 40.3, y = 0.75,\n           label = \"Division\", size = 7,\n           color = \"red\") +\n  annotate(geom = \"text\", x = 40.8, y = 0.25,\n           label = \"Wild Card\", size = 7,\n           color = \"blue\") +\n  ggtitle(\"How Many Games Does Team Need to Win?\") +\n  centertitle()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sports Data Analysis and Visualization",
    "section": "",
    "text": "This project uses real MLB data to project how the 2023 season could finish. The first step was just using a 50/50 chance for each team to win for the rest of the season and then adding more determining factors as time went on. This program can also be altered to be used with many different types of data to create projections.\n\n\n\n\n\n\n\n\n\n\n\n\nMariners Playoff Analysis\n\n\n\n\n\n\n\n\n\n\n\n\nMay 31, 2023\n\n\nJonna Waage\n\n\n\n\n\n\n\n\nResources\n\n\n\n\n\n\n\n\n\n\n\n\nMay 30, 2023\n\n\nJonna Waage\n\n\n\n\n\n\n\n\n2020 Season Simulation\n\n\n\n\n\n\n\n\n\n\n\n\nJun 27, 2020\n\n\nJim Albert\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]