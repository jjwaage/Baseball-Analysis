{
  "hash": "a39db73eb61e42b2eb15fe19e277689d",
  "result": {
    "markdown": "---\ntitle: \"2020 Season Simulation\"\nauthor: Jim Albert\ndate:  June 27, 2020\noutput: html_document\n---\n\n\n\n\n#### Introduction\n\nSimulates a 2020 season of 60 games using the Bradley-Terry model.\n\nBy repeated simulations, can explore the relationship between talent and season performance.\n\n#### Main functions\n\nRead in two functions:\n\n- ```one.simulation.20()``` performs the simulation\n- ```print_standings()``` prints the division standings of the simulation\n\n\n\n::: {.cell}\n\n:::\n\n\nRead in several packages that I'll need.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(MASS)\n```\n:::\n\n\nAlso I am adding several helper functions ```increasefont()``` and ```centertitle()``` that I will use in ggplot2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nincreasefont <- function(Size = 18){\n  theme(text = element_text(size = Size))\n}\ncentertitle <- function(Color = \"blue\"){\n    theme(plot.title = \n            element_text(colour = Color, size = 18, \n        hjust = 0.5, vjust = 0.8, angle = 0))\n}\n```\n:::\n\n\n#### One simulation\n\nOne simulation assuming a standard deviation of 0.3.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nout <- one.simulation.20(0.3)\nprint_standings(out)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                             \n  AL East  W  L NL East  W  L\n  ------------- -------------\n      BAL 39 21     NYN 37 23\n      TBA 37 23     WAS 30 30\n      BOS 36 24     PHI 28 32\n      TOR 25 35     MIA 25 35\n      NYA 21 39     ATL 22 38\n                             \n  AL Cent  W  L NL Cent  W  L\n  ------------- -------------\n      MIN 33 27     CHN 37 23\n      KCR 32 28     PIT 33 27\n      CHA 32 28     SLN 29 31\n      CLE 30 30     CIN 28 32\n      DET 29 31     MIL 17 43\n                             \n  AL West  W  L NL West  W  L\n  ------------- -------------\n      SEA 40 20     COL 34 26\n      HOU 32 28     SDN 33 27\n      TEX 26 34     LAN 32 28\n      LAA 25 35     ARI 29 31\n      OAK 24 36     SFN 25 35\n```\n:::\n:::\n\n#### 1000 Simulations\n\nStore the results of 1000 simulated seasons:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_out <- NULL\nfor(j in 1:1000){\n  out <- one.simulation.20(0.3)\n  out$Simulation <- j\n  all_out <- rbind(all_out, out)\n}\n```\n:::\n\n\n#### Talent and probability of making playoffs\n\nDefine a new variable Level that is 0 (missed playoffs), 1 (wild-card), or 2 (win division).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_out %>% \n  mutate(Level = as.factor(2 * (Winner.Div == 1) +\n                 (Wild.Card == 1))) -> all_out\n```\n:::\n\n\nLevel is an ordinal response variable.  Using a proportional odds model, model the ordinal response as a function of the team's talent.\n\nFor a range of talent values from -0.9 to 0.9, find the fitted model probability of the three outcomes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npfit <- polr(Level ~ Talent,\n             data = all_out)\nDF <- data.frame(Talent = seq(-0.9, 0.9,\n                                  length.out = 200))\nProb <- predict(pfit, DF, type = \"probs\")\nDF1 <- DF2 <- DF3 <- DF\nDF1$Probability <- Prob[, 3]; DF1$Type <- \"Division\"\nDF2$Probability <- Prob[, 2]; DF2$Type <- \"Wild Card\"\nDF3$Probability <- Prob[, 3] + Prob[, 2]\nDF3$Type <- \"Playoff\"\nDFall <- rbind(DF1, DF2, DF3)\n```\n:::\n\n\nGraph of this division, wild card, and playoff probabilities.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(DFall, aes(Talent, Probability,\n                  color = Type)) +\n  geom_line() +\n  increasefont() +\n  ggtitle(\"Probability of Reaching Different Levels\") +\n  centertitle()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n#### Talents of wild card teams and division-winners\n\nConstruct density estimates of \n\n- all teams\n- teams that win division\n- teams that get wild card\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1 <- filter(all_out, Wild.Card == 1) %>% \n         mutate(Type = \"Wild Card\")\ndata2 <- filter(all_out, Winner.Div == 1) %>% \n  mutate(Type = \"Win Division\")\ndata3 <- all_out %>% \n  mutate(Type = \"All Teams\")\n\nggplot(rbind(data1, data2, data3), \n       aes(Talent, color = Type)) +\n  geom_density(size = 1.5) +\n  increasefont() + centertitle() +\n  ggtitle(\"Talent Distributions for Three Types of Teams\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n#### How many games to win?\n\nFind the conditional probability of winning division title, of getting wild card, and making the playoffs\ngiven you won X games.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_out %>% \n  filter(Wins >= 25, Wins <= 45) %>% \n  group_by(Wins) %>% \n  summarize(N = n(), \n            Prob_Div = mean(Winner.Div),\n            Prob_WC = mean(Wild.Card),\n            .groups = \"drop\") -> S\n```\n:::\n\n\nPlot smooths of these empirical probabilities.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nS %>% \n  ggplot() +\n  geom_smooth(aes(Wins, Prob_Div), se = FALSE,\n              color = \"red\",\n              method = \"loess\") +\n  geom_smooth(aes(Wins, Prob_WC), se = FALSE,\n              color = \"blue\",\n              method = \"loess\") + \n  geom_smooth(aes(Wins, Prob_Div + Prob_WC),\n                  se = FALSE,\n              color = \"black\",\n              method = \"loess\") +\n  increasefont() +\n  ylab(\"Probability\") +\n  annotate(geom = \"text\", x = 32, y = 0.75,\n           label = \"Playoffs\", size = 7) +\n  annotate(geom = \"text\", x = 40.3, y = 0.75,\n           label = \"Division\", size = 7,\n           color = \"red\") +\n  annotate(geom = \"text\", x = 40.8, y = 0.25,\n           label = \"Wild Card\", size = 7,\n           color = \"blue\") +\n  ggtitle(\"How Many Games Does Team Need to Win?\") +\n  centertitle()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}