{
  "hash": "e3ebe3c2dfdb20291e627424418bfcdd",
  "result": {
    "markdown": "---\ntitle: \"Comparing My Playoff Projection to Playoff Percentages Each Week\"\nauthor: \"Jonna Waage\"\ndate: \"2023-09-25\"\n---\n\n\n## How does my Projection of Playoff Contending Teams Compare to their Percentages of Making the Playoffs Every Week?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"playoffsummarydata.RData\")\n\nfiles <- list.files( pattern = \"*.xlsx\", full.names = TRUE)\n\nall_data <- files %>%\n  map_dfr(~ {\n    temp_data <- read_excel(.x, skip = 1)\n    temp_data <- temp_data[, c(\"Date\", \"Post\")] %>%\n      mutate(FileName = tools::file_path_sans_ext(basename(.x)))\n    return(temp_data)\n  })\n\nprint(playoffsummary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30 × 3\n# Groups:   Division [6]\n   Division Team                  `Percent Playoffs Made`\n   <chr>    <chr>                 <chr>                  \n 1 NL_West  Los Angeles Dodgers   89.3%                  \n 2 NL_West  San Francisco Giants  50.0%                  \n 3 NL_West  San Diego Padres      42.4%                  \n 4 NL_West  Arizona Diamondbacks  28.6%                  \n 5 NL_West  Colorado Rockies      10.6%                  \n 6 NL_East  Atlanta Braves        68.7%                  \n 7 NL_East  New York Mets         67.9%                  \n 8 NL_East  Philadelphia Phillies 49.4%                  \n 9 NL_East  Miami Marlins         22.9%                  \n10 NL_East  Washington Nationals  6.8%                   \n# ℹ 20 more rows\n```\n:::\n\n```{.r .cell-code}\nconvert_to_percentage <- function(value) {\n  # Remove greater than and less than signs if present\n  cleaned_value <- gsub(\"[><]\", \"\", as.character(value))\n  \n  if (grepl(\"%\", cleaned_value)) {\n    return(cleaned_value)\n  } else if (grepl(\"E\", cleaned_value)) {\n    return(sprintf(\"%.2f%%\", as.numeric(cleaned_value) * 100))\n  } else {\n    return(sprintf(\"%.2f%%\", as.numeric(cleaned_value) * 100))\n  }\n}\n\nall_data$Post <- sapply(all_data$Post, convert_to_percentage)\n\nnames(all_data)[names(all_data) == \"FileName\"] <- \"Team\"\nprint(all_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,460 × 3\n   Date                Post  Team  \n   <dttm>              <chr> <chr> \n 1 2023-10-01 00:00:00 0.1%  angels\n 2 2023-09-30 00:00:00 0.1%  angels\n 3 2023-09-29 00:00:00 0.1%  angels\n 4 2023-09-28 00:00:00 0.1%  angels\n 5 2023-09-27 00:00:00 0.1%  angels\n 6 2023-09-26 00:00:00 0.1%  angels\n 7 2023-09-25 00:00:00 0.1%  angels\n 8 2023-09-24 00:00:00 0.1%  angels\n 9 2023-09-23 00:00:00 0.1%  angels\n10 2023-09-22 00:00:00 0.1%  angels\n# ℹ 5,450 more rows\n```\n:::\n\n```{.r .cell-code}\n#write.csv(playoffsummary, file = \"playoffsummary.csv\")\nplayoffsummary<-read.csv(\"playoffsummary.csv\")\n\nmerged_data <- merge(playoffsummary, all_data, by.x = \"Team_short\", by.y = \"Team\")\n\n# Assuming 'merged_data' is your merged data frame\n# Convert the \"Date\" column to a proper date format\nmerged_data$Date <- as.Date(merged_data$Date, format = \"%Y-%m-%d\")\n\n# Make sure 'Team' is a factor\nmerged_data$Team <- factor(merged_data$Team, levels = unique(merged_data$Team))\n\nmerged_data$Post <- as.numeric(gsub(\"%\", \"\", merged_data$Post))\n\n# Create the animated dot plot using gganimate\np <- ggplot(merged_data, aes(x = Percent.Playoffs.Made, y = Post, color = Team, label = as.character(Date))) +\n  geom_point(size = 1) +  # Adjust the size of the points\n  geom_text(hjust = 0, vjust = 1, size = 3, x = 0, y = 1) +\n  labs(title = \"MLB Playoff Percentage Comparison\") +\n  theme_minimal() +\n  transition_time(Date) +  # Use transition_time for animation over time\n  enter_fade() +\n  exit_fade() +\n  theme(axis.text = element_text(size = 6),  # Adjust text size on the axes\n        plot.title = element_text(hjust = 0.5),  # Center the title\n        axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels\n        axis.text.y = element_text(size = 6),  # Adjust y-axis text size\n        axis.ticks = element_blank(),  # Remove axis ticks\n        plot.margin = margin(2, 10, 2, 2, \"mm\")) +  # Adjust plot margin\n\n  scale_x_discrete() +  # Use scale_x_discrete for discrete x-axis values\n  scale_y_continuous(breaks = seq(0, 100, by = 10))\n  annotate(\"text\", x = Inf, y = Inf, label = paste(\"Date: \", as.character(merged_data$Date[1])), hjust = 1, vjust = 1, size = 3, color = \"black\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmapping: x = ~x, y = ~y \ngeom_text: na.rm = FALSE\nstat_identity: na.rm = FALSE\nposition_identity \n```\n:::\n\n```{.r .cell-code}\n# Save the animation as a GIF directly to the desired location\nfinal_animation_file <- \"/Users/jonnawaage/Documents/GitHub/Baseball Analysis/docs/posts/Playoff Analysis/mlb_playoff_animation.gif\"\ngganimate::anim_save(final_animation_file, animate(p, nframes = 100, duration = 100, end_pause = 10), renderer = gifski_renderer)\n\n# Display the animation in the R Markdown document\nknitr::include_graphics(final_animation_file)\n```\n\n::: {.cell-output-display}\n![](../../docs/posts/Playoff Analysis/mlb_playoff_animation.gif)\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}